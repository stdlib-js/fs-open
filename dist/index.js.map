{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/main.js", "../lib/sync.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"flags\": \"r\",\n\t\"mode\": 438\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar op = require( 'fs' ).open;\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Asynchronously opens a file.\n*\n* @param {(string|Buffer)} path - file path\n* @param {(string|number)} [flags='r'] - file system flags\n* @param {integer} [mode=0o666] - file mode\n* @param {Function} clbk - callback to invoke after opening a file\n* @returns {void}\n*\n* @example\n* var closeSync = require( '@stdlib/fs-close' ).sync;\n* var open = require( '@stdlib/fs-open' );\n*\n* function onOpen( error, fd ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     closeSync( fd );\n* }\n* open( __filename, onOpen );\n*/\nfunction open( path, flags, mode, clbk ) { // eslint-disable-line stdlib/no-redeclare\n\tvar nargs = arguments.length;\n\tif ( nargs === 2 ) {\n\t\treturn op( path, defaults.flags, defaults.mode, flags );\n\t}\n\tif ( nargs === 3 ) {\n\t\treturn op( path, flags, defaults.mode, mode );\n\t}\n\top( path, flags, mode, clbk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = open;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar open = require( 'fs' ).openSync; // eslint-disable-line node/no-sync, stdlib/no-redeclare\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Synchronously opens a file.\n*\n* @param {(string|Buffer)} path - file path\n* @param {(string|number)} [flags='r'] - file system flags\n* @param {integer} [mode=0o666] - file mode\n* @returns {(integer|Error)} file descriptor or an error\n*\n* @example\n* var closeSync = require( '@stdlib/fs-close' ).sync;\n*\n* var fd = openSync( __filename );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n* closeSync( fd );\n*/\nfunction openSync( path, flags, mode ) {\n\tvar nargs;\n\tvar fd;\n\n\tnargs = arguments.length;\n\ttry {\n\t\tif ( nargs === 1 ) {\n\t\t\tfd = open( path, defaults.flags, defaults.mode );\n\t\t} else if ( nargs === 2 ) {\n\t\t\tfd = open( path, flags, defaults.mode );\n\t\t} else {\n\t\t\tfd = open( path, flags, mode );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn fd;\n}\n\n\n// EXPORTS //\n\nmodule.exports = openSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Open a file.\n*\n* @module @stdlib/fs-open\n*\n* @example\n* var closeSync = require( '@stdlib/fs-close' ).sync;\n* var open = require( '@stdlib/fs-open' );\n*\n* function onOpen( error, fd ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     closeSync( fd );\n* }\n* open( __filename, onOpen );\n*\n* @example\n* var closeSync = require( '@stdlib/fs-close' ).sync;\n* var openSync = require( '@stdlib/fs-open' ).sync;\n*\n* var fd = openSync( __filename );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n* closeSync( fd );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SACC,MAAS,IACT,KAAQ,GACT,ICHA,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAK,QAAS,IAAK,EAAE,KACrBC,EAAW,IA0Bf,SAASC,EAAMC,EAAMC,EAAOC,EAAMC,EAAO,CACxC,IAAIC,EAAQ,UAAU,OACtB,GAAKA,IAAU,EACd,OAAOP,EAAIG,EAAMF,EAAS,MAAOA,EAAS,KAAMG,CAAM,EAEvD,GAAKG,IAAU,EACd,OAAOP,EAAIG,EAAMC,EAAOH,EAAS,KAAMI,CAAK,EAE7CL,EAAIG,EAAMC,EAAOC,EAAMC,CAAK,CAC7B,CAKAP,EAAO,QAAUG,IC/DjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,IAAK,EAAE,SACvBC,EAAW,IAsBf,SAASC,EAAUC,EAAMC,EAAOC,EAAO,CACtC,IAAIC,EACAC,EAEJD,EAAQ,UAAU,OAClB,GAAI,CACEA,IAAU,EACdC,EAAKP,EAAMG,EAAMF,EAAS,MAAOA,EAAS,IAAK,EACpCK,IAAU,EACrBC,EAAKP,EAAMG,EAAMC,EAAOH,EAAS,IAAK,EAEtCM,EAAKP,EAAMG,EAAMC,EAAOC,CAAK,CAE/B,OAAUG,EAAM,CACf,OAAOA,CACR,CACA,OAAOD,CACR,CAKAR,EAAO,QAAUG,ICjBjB,IAAIO,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAO,IAKXF,EAAaC,EAAM,OAAQC,CAAK,EAKhC,OAAO,QAAUD",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "op", "defaults", "open", "path", "flags", "mode", "clbk", "nargs", "require_sync", "__commonJSMin", "exports", "module", "open", "defaults", "openSync", "path", "flags", "mode", "nargs", "fd", "err", "setReadOnly", "main", "sync"]
}
